1. https://leetcode.com/problems/merge-sorted-array/
code-
import java.util.Scanner;

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1, j = n - 1, k = m + n - 1;
        
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }
        
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int m = scanner.nextInt();

        int n = scanner.nextInt();

        int[] nums1 = new int[m + n];
        int[] nums2 = new int[n];

        for (int i = 0; i < m; i++) {
            nums1[i] = scanner.nextInt();
        }

        for (int i = 0; i < n; i++) {
            nums2[i] = scanner.nextInt();
        }

        Solution solution = new Solution();
        solution.merge(nums1, m, nums2, n);

        for (int num : nums1) {
            System.out.print(num + " ");
        }
    }
}

2. https://www.interviewbit.com/problems/kth-smallest-element-in-the-array/
code-
import java.util.Random;

public class Solution {

    public int kthsmallest(final int[] A, int B) {
        if (B < 1 || B > A.length) {
            throw new IllegalArgumentException("Invalid value of B");
        }

        return quickSelect(A, 0, A.length - 1, B - 1);
    }

    private int quickSelect(int[] arr, int low, int high, int k) {
        if (low == high) {
            return arr[low];
        }

        int pivotIndex = partition(arr, low, high);
        if (pivotIndex == k) {
            return arr[pivotIndex];
        } else if (pivotIndex < k) {
            return quickSelect(arr, pivotIndex + 1, high, k);
        } else {
            return quickSelect(arr, low, pivotIndex - 1, k);
        }
    }

    private int partition(int[] arr, int low, int high) {
        int pivotIndex = choosePivot(low, high);
        int pivot = arr[pivotIndex];
        swap(arr, pivotIndex, high);
        int i = low;

        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                swap(arr, i, j);
                i++;
            }
        }

        swap(arr, i, high);
        return i;
    }

    private int choosePivot(int low, int high) {
        Random rand = new Random();
        return rand.nextInt(high - low + 1) + low;
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] A = {2, 1, 4, 3, 2};
        int B = 3;

        int result = solution.kthsmallest(A, B);
        System.out.println(result);
    }
}

3. https://practice.geeksforgeeks.org/problems/consecutive-array-elements2711/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article
code-
import java.util.Scanner;

class Solution {
    boolean areConsecutives(long arr[], int N) {
        if (N <= 1) {
            return true;
        }

        long min = arr[0];
        for (int i = 0; i < N; i++) {
            min = Math.min(min, arr[i]);
        }

        long sum = 0;
        for (int i = 0; i < N; i++) {
            sum += arr[i] - min;
        }

        long expectedSum = (N * (N - 1)) / 2;

        return sum == expectedSum;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the array: ");
        int N = scanner.nextInt();

        long[] arr = new long[N];
        System.out.println("Enter the array elements:");
        for (int i = 0; i < N; i++) {
            arr[i] = scanner.nextLong();
        }

        System.out.println("Are elements consecutive? " + solution.areConsecutives(arr, N));

        scanner.close();
    }
}

4. https://practice.geeksforgeeks.org/problems/chocolate-distribution-problem3825/1
code-

5. https://leetcode.com/problems/sort-an-array/description/
code-

6. https://leetcode.com/problems/sort-colors/description/
code-

7. https://leetcode.com/problems/sort-an-array/description/
code-
