1. Largest Element in Array
code:
public static int largest(int[] arr, int n) {
    if (n == 0) {
        // If the array is empty, return a suitable value (e.g., -1 or throw an exception)
        return -1;
    }

    int max = arr[0]; // Initialize max with the first element of the array

    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i]; // Update max if a larger element is found
        }
    }

    return max; // Return the maximum element
}



2. Find minimum and maximum element in an array
code:
static Pair getMinMax(long a[], long n) {
    if (n == 0) {
        // If the array is empty, return a suitable value (e.g., null or throw an exception)
        return null;
    }

    long min = a[0]; // Initialize min with the first element of the array
    long max = a[0]; // Initialize max with the first element of the array

    for (int i = 1; i < n; i++) {
        if (a[i] < min) {
            min = a[i]; // Update min if a smaller element is found
        }
        if (a[i] > max) {
            max = a[i]; // Update max if a larger element is found
        }
    }

    return new Pair(min, max); // Return the Pair with min and max elements
}

3. First and last occurrences of x
code:
import java.util.ArrayList;

class GFG
{
    ArrayList<Long> find(long arr[], int n, int x)
    {
        ArrayList<Long> result = new ArrayList<>();
        
        // Initialize variables to store the first and last occurrences of x
        long firstOccurrence = binarySearchFirstOccurrence(arr, 0, n - 1, x);
        long lastOccurrence = binarySearchLastOccurrence(arr, 0, n - 1, x);

        result.add(firstOccurrence);
        result.add(lastOccurrence);

        return result;
    }

    // Binary search to find the first occurrence of x in the array
    private long binarySearchFirstOccurrence(long arr[], int left, int right, int x) {
        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (arr[mid] == x) {
                // If the current element is equal to x, check if it's the first occurrence
                if (mid == 0 || arr[mid - 1] < x) {
                    return mid;
                } else {
                    right = mid - 1;
                }
            } else if (arr[mid] < x) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1;
    }

    // Binary search to find the last occurrence of x in the array
    private long binarySearchLastOccurrence(long arr[], int left, int right, int x) {
        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (arr[mid] == x) {
                // If the current element is equal to x, check if it's the last occurrence
                if (mid == right || arr[mid + 1] > x) {
                    return mid;
                } else {
                    left = mid + 1;
                }
            } else if (arr[mid] < x) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1;
    }
}

4. Search an Element in an array
Code:
 class Solution {
    static int search(int arr[], int N, int X) {
        for (int i = 0; i < N; i++) {
            if (arr[i] == X) {
                return i; // Return the index of the first occurrence of X
            }
        }
        return -1; // X is not found in the array
    }
}

