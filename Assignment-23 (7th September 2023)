1. https://leetcode.com/problems/sliding-window-maximum/
code-
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        Deque<Integer> dq = new ArrayDeque<>();
        List<Integer> res = new ArrayList<>();

        for (int i = 0; i < k; i++) {
            while (!dq.isEmpty() && nums[i] >= nums[dq.peekLast()]) {
                dq.pollLast();
            }
            dq.offerLast(i);
        }
        res.add(nums[dq.peekFirst()]);

        for (int i = k; i < nums.length; i++) {
            if (dq.peekFirst() == i - k) {
                dq.pollFirst();
            }
            while (!dq.isEmpty() && nums[i] >= nums[dq.peekLast()]) {
                dq.pollLast();
            }

            dq.offerLast(i);
            res.add(nums[dq.peekFirst()]);
        }
        // Return the result as an array.
        return res.stream().mapToInt(i->i).toArray();
    }
}

2. https://leetcode.com/problems/binary-tree-inorder-traversal/
code-

class Solution {
    List<Integer> li = new LinkedList<Integer>();
    public List<Integer> inorderTraversal(TreeNode root) {
     if(root == null){
         List<Integer> li = new LinkedList<Integer>();
         return li ;
     }
     inorderTraversal(root.left);     
     li.add(root.val);     
     inorderTraversal(root.right);
     return li;

    }
    
}

3. https://leetcode.com/problems/binary-tree-preorder-traversal/
code-
class Solution {
    List<Integer> list = new ArrayList();
    public List<Integer> preorderTraversal(TreeNode root) {
        if(root != null){
            list.add(root.val);
            preorderTraversal(root.left);
            preorderTraversal(root.right);
        }
        return list;
    }
}

4. https://leetcode.com/problems/binary-tree-postorder-traversal/
code-
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        helper(root, ans);
        return ans;
    }

    private void helper(TreeNode node, List<Integer> ans) {
        if(node == null) return;

        helper(node.left, ans);
        helper(node.right, ans);
        ans.add(node.val);
    }
}
