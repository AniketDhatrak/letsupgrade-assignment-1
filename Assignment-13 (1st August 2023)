1. https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article
code-
class Solution {
    static long inversionCount(long arr[], long N) {
        long[] temp = new long[(int) N];
        return mergeSort(arr, temp, 0, N - 1);
    }

    static long mergeSort(long[] arr, long[] temp, long left, long right) {
        long invCount = 0;

        if (left < right) {
            long mid = left + (right - left) / 2;

            invCount += mergeSort(arr, temp, left, mid);
            invCount += mergeSort(arr, temp, mid + 1, right);

            invCount += merge(arr, temp, left, mid + 1, right);
        }

        return invCount;
    }

    static long merge(long[] arr, long[] temp, long left, long mid, long right) {
        long invCount = 0;
        int i = (int) left;
        int j = (int) mid;
        int k = (int) left;

        while (i <= mid - 1 && j <= (int) right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
                invCount += mid - i;
            }
        }

        while (i <= mid - 1) {
            temp[k++] = arr[i++];
        }

        while (j <= (int) right) {
            temp[k++] = arr[j++];
        }

        for (i = (int) left; i <= (int) right; i++) {
            arr[i] = temp[i];
        }

        return invCount;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();

        long[] arr = new long[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextLong();
        }

        long inversions = solution.inversionCount(arr, n);
        System.out.println(inversions);

        scanner.close();
    }
}

2. https://leetcode.com/problems/largest-number/
code-
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

class Solution {
    public String largestNumber(int[] nums) {
        String[] numStrings = new String[nums.length];
        for (int i = 0; i < nums.length; i++) {
            numStrings[i] = String.valueOf(nums[i]);
        }

        Arrays.sort(numStrings, new Comparator<String>() {
            @Override
            public int compare(String a, String b) {
                return (b + a).compareTo(a + b);
            }
        });

        StringBuilder result = new StringBuilder();
        for (String numString : numStrings) {
            result.append(numString);
        }

        // Remove leading zeroes
        int index = 0;
        while (index < result.length() - 1 && result.charAt(index) == '0') {
            index++;
        }

        return result.substring(index);
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();

        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        String largestNum = solution.largestNumber(nums);
        System.out.println(largestNum);

        scanner.close();
    }
}

3. https://leetcode.com/problems/minimum-increment-to-make-array-unique/
code-
import java.util.Arrays;
import java.util.Scanner;

class Solution {
    public int minIncrementForUnique(int[] nums) {
        if (nums.length <= 1) {
            return 0;
        }

        Arrays.sort(nums);

        int moves = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i - 1]) {
                int diff = nums[i - 1] - nums[i] + 1;
                nums[i] += diff;
                moves += diff;
            }
        }

        return moves;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();

        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        int minMoves = solution.minIncrementForUnique(nums);
        System.out.println(minMoves);

        scanner.close();
    }
}

4. https://leetcode.com/problems/reverse-pairs/submissions/985527462/
code-
import java.util.Scanner;

class Solution {
    public int reversePairs(int[] nums) {
        return mergeSortAndCount(nums, 0, nums.length - 1);
    }

    private int mergeSortAndCount(int[] nums, int left, int right) {
        if (left >= right) {
            return 0;
        }

        int mid = left + (right - left) / 2;
        int count = mergeSortAndCount(nums, left, mid) + mergeSortAndCount(nums, mid + 1, right);

        int j = mid + 1;
        for (int i = left; i <= mid; i++) {
            while (j <= right && nums[i] > 2L * nums[j]) {
                j++;
            }
            count += j - (mid + 1);
        }

        merge(nums, left, mid, right);
        return count;
    }

    private void merge(int[] nums, int left, int mid, int right) {
        int[] temp = new int[right - left + 1];
        int i = left, j = mid + 1, k = 0;

        while (i <= mid && j <= right) {
            if (nums[i] <= nums[j]) {
                temp[k++] = nums[i++];
            } else {
                temp[k++] = nums[j++];
            }
        }

        while (i <= mid) {
            temp[k++] = nums[i++];
        }

        while (j <= right) {
            temp[k++] = nums[j++];
        }

        for (int l = 0; l < temp.length; l++) {
            nums[left + l] = temp[l];
        }
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();

        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        int reversePairCount = solution.reversePairs(nums);
        System.out.println(reversePairCount);

        scanner.close();
    }
}

5. https://leetcode.com/problems/count-of-smaller-numbers-after-self/submissions/754779254/
code-
import java.util.*;

class Solution {
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> result = new ArrayList<>();
        int n = nums.length;
        
        TreeSet<Integer> sortedSet = new TreeSet<>();
        
        for (int i = n - 1; i >= 0; i--) {
            
            int count = sortedSet.headSet(nums[i]).size();
            result.add(0, count);
            
            sortedSet.add(nums[i]);
        }
        
        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();

        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        List<Integer> result = solution.countSmaller(nums);
        System.out.println(result);

        scanner.close();
    }
}
