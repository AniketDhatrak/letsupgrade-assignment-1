1. https://leetcode.com/problems/row-with-maximum-ones/
code-
class Solution {
    public int[] rowAndMaximumOnes(int[][] mat) {
        int m = mat.length;
        int n = mat[0].length;
        int maxRow = -1;
        int maxCount = 0;

        for (int i = 0; i < m; i++) {
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    count++;
                }
            }
            if (count > maxCount) {
                maxCount = count;
                maxRow = i;
            }
        }

        return new int[]{maxRow, maxCount};
    }
}


2. https://leetcode.com/problems/search-a-2d-matrix/
code-
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        int left = 0;
        int right = m * n - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int midValue = matrix[mid / n][mid % n];

            if (midValue == target) {
                return true;
            } else if (midValue < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return false;
    }
}

3. https://www.interviewbit.com/problems/maximum-sum-square-submatrix/
code-
import java.util.Scanner;

public class Solution {
    public int solve(int[][] A, int B) {
        int N = A.length;
        int[][] prefixSum = new int[N][N];

        // Calculate prefix sum for each cell
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                int top = (i - 1 >= 0) ? prefixSum[i - 1][j] : 0;
                int left = (j - 1 >= 0) ? prefixSum[i][j - 1] : 0;
                int topLeft = (i - 1 >= 0 && j - 1 >= 0) ? prefixSum[i - 1][j - 1] : 0;
                prefixSum[i][j] = A[i][j] + top + left - topLeft;
            }
        }

        int maxSum = Integer.MIN_VALUE;

        // Iterate over each submatrix of size B x B
        for (int i = B - 1; i < N; i++) {
            for (int j = B - 1; j < N; j++) {
                int sum = prefixSum[i][j];

                if (i - B >= 0) {
                    sum -= prefixSum[i - B][j];
                }
                if (j - B >= 0) {
                    sum -= prefixSum[i][j - B];
                }
                if (i - B >= 0 && j - B >= 0) {
                    sum += prefixSum[i - B][j - B];
                }

                maxSum = Math.max(maxSum, sum);
            }
        }

        return maxSum;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the value of N: ");
        int N = scanner.nextInt();

        int[][] A = new int[N][N];

        System.out.println("Enter the matrix A:");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                A[i][j] = scanner.nextInt();
            }
        }

        System.out.print("Enter the value of B: ");
        int B = scanner.nextInt();

        Solution solution = new Solution();
        int result = solution.solve(A, B);

        System.out.println("Output: " + result);
    }
}

4. https://leetcode.com/problems/first-missing-positive/
code-
import java.util.Scanner;

class Solution {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            while (nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]) {
                int temp = nums[nums[i] - 1];
                nums[nums[i] - 1] = nums[i];
                nums[i] = temp;
            }
        }

        for (int i = 0; i < n; i++) {
            if (nums[i] != i + 1) {
                return i + 1;
            }
        }

        return n + 1;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();

        int[] nums = new int[n];

        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        Solution solution = new Solution();
        int result = solution.firstMissingPositive(nums);

        System.out.println(result);
    }
}


5. https://practice.geeksforgeeks.org/problems/search-in-a-matrix-1587115621/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article
code-
import java.util.Scanner;

class Solution {
    // Function to search a given number in row-column sorted matrix.
    static boolean search(int matrix[][], int n, int m, int x) {
        int i = 0, j = m - 1; // Start from the top-right corner

        while (i < n && j >= 0) {
            if (matrix[i][j] == x) {
                return true; // Element found
            } else if (matrix[i][j] > x) {
                j--; // Move left in the current row
            } else {
                i++; // Move down in the current column
            }
        }

        return false; // Element not found
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of rows (n): ");
        int n = scanner.nextInt();
        System.out.print("Enter the number of columns (m): ");
        int m = scanner.nextInt();

        int[][] matrix = new int[n][m];

        System.out.println("Enter the matrix elements:");

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        System.out.print("Enter the target value (x): ");
        int x = scanner.nextInt();

        boolean result = search(matrix, n, m, x);

        System.out.println("Output: " + (result ? "1 (Element found)" : "0 (Element not found)"));
    }
}

6. https://leetcode.com/problems/range-sum-query-2d-immutable/
code-
import java.util.Scanner;

class NumMatrix {
    private int[][] prefixSum;

    public NumMatrix(int[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) {
            return;
        }

        int rows = matrix.length;
        int cols = matrix[0].length;

        prefixSum = new int[rows + 1][cols + 1];

     
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= cols; j++) {
                prefixSum[i][j] = matrix[i - 1][j - 1] + prefixSum[i - 1][j] + prefixSum[i][j - 1] - prefixSum[i - 1][j - 1];
            }
        }
    }

    public int sumRegion(int row1, int col1, int row2, int col2) {
        return prefixSum[row2 + 1][col2 + 1] - prefixSum[row2 + 1][col1] - prefixSum[row1][col2 + 1] + prefixSum[row1][col1];
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int rows = scanner.nextInt();

        int cols = scanner.nextInt();

        int[][] matrix = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        NumMatrix numMatrix = new NumMatrix(matrix);

        int row1 = scanner.nextInt();
        int col1 = scanner.nextInt();
        int row2 = scanner.nextInt();
        int col2 = scanner.nextInt();

        int result = numMatrix.sumRegion(row1, col1, row2, col2);

        System.out.println(result);
    }
}
