1. https://leetcode.com/problems/implement-queue-using-stacks/
code-
class MyQueue {
    Stack<Integer> first;
    Stack<Integer> second;
    public MyQueue() 
    { 
      first = new Stack<>();
      second = new Stack<>();
    }
    public void push(int x)
    {
      first.push(x);
    }
    
    // first pop it from first stack and push into second stack, 
    // then pop the element from second stack and again pop 
    // it from second stack and push in first stack 
    public int pop() 
    {
         while(!first.isEmpty())
         second.push(first.pop());
         
         int removed = second.pop();

         while(!second.isEmpty())
         first.push(second.pop());
         
         return removed;
    }
    // same thing in peek as pop
    public int peek() 
    {
         while(! first.isEmpty())
         second.push(first.pop());
         
         int peeked= second.peek();

         while(!second.isEmpty())
         first.push(second.pop());
         
         return peeked;
    }
    
    public boolean empty()
    {
      return first.isEmpty() && second.isEmpty();
    }
}

2. https://practice.geeksforgeeks.org/problems/implement-queue-using-array/1
code-
class MyQueue {
 
    int front, rear;
int arr[] = new int[100005];
 
    MyQueue()
{
front=0;
rear=0;
}
 
//Function to push an element x in a queue.
void push(int x)
{
    // Your code here
    arr[rear++]=x;
} 
 
    //Function to pop an element from queue and return that element.
int pop()
{
    if(front==rear){
    return -1;
        
    }
// Your code here
return arr[front++];
} 
}

3. https://practice.geeksforgeeks.org/problems/queue-operations/0
code-
class Geeks{
    static void insert(Queue<Integer> q, int k){
        q.add(k);
    }
    static int findFrequency(Queue<Integer> q, int k){
        return Collections.frequency(q, k);
    }
}

4. https://practice.geeksforgeeks.org/problems/implement-queue-using-linked-list/1
code-
class MyQueue
{
    QueueNode front, rear;
    
    //Function to push an element into the queue.
void push(int a)
{
        QueueNode temp = new QueueNode(a);
        if(rear == null){
            front = temp;
            rear = temp;
        }else{
            rear.next = temp;
            rear = temp;
            
        }
 
}
 
    //Function to pop front element from the queue.
int pop()
{
        // Your code here
        if(front == null ){
            return -1;
        }
        int data = front.data;
        front = front.next;
        if(front == null){
            rear = null;
        }
        return data;
}
}

5. https://practice.geeksforgeeks.org/problems/reverse-first-k-elements-of-queue/1
code-
class GfG {
    // Function to reverse first k elements of a queue.
    public Queue<Integer> modifyQueue(Queue<Integer> q, int k) {
        Stack<Integer> st = new Stack<>();
        int i=k;
        while(i>0){
            st.add(q.poll());
            i--;
        }
        while(!st.isEmpty())
           q.add(st.pop());
        
        i=q.size()-k;
        while(i > 0){
            q.add(q.poll());
            i--;
        }
        return q;
    }
}

6. https://practice.geeksforgeeks.org/problems/queue-using-two-stacks/1?page=1&difficulty[]=-2&difficulty[]=-1&difficulty[]=0&category[]=Queue&sortBy=submissions
code-
class StackQueue
{
    Stack<Integer> s1 = new Stack<Integer>();
    Stack<Integer> s2 = new Stack<Integer>();

    void Push(int x) {

  while(!s2.isEmpty()) {

    s1.push(s2.pop());

  }

  s1.push(x);

}

 

int Pop() {

  while(!s1.isEmpty()) {

    s2.push(s1.pop());

  }

  return (!s2.isEmpty()) ? s2.pop() : -1 ;

}
}

7. https://practice.geeksforgeeks.org/problems/queue-reversal/1?page=1&difficulty[]=-2&difficulty[]=-1&difficulty[]=0&category[]=Queue&sortBy=submissionscode-
code-
class GfG{
    
    public void reverse(Queue<Integer> q){
        int x=0;
        if(!q.isEmpty()){
            x=q.peek();
            q.poll();
            reverse(q);
            q.add(x);
        }
        
    }
    public Queue<Integer> rev(Queue<Integer> q){
        reverse(q);
        return q;
    }
}
