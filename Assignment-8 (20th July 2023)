1. https://leetcode.com/problems/trapping-rain-water/
code-
import java.util.Scanner;

public class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];

        leftMax[0] = height[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], height[i]);
        }

        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = Math.max(rightMax[i + 1], height[i]);
        }

        int trappedWater = 0;
        for (int i = 0; i < n; i++) {
            int minHeight = Math.min(leftMax[i], rightMax[i]);
            trappedWater += minHeight - height[i];
        }

        return trappedWater;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();

        int[] height = new int[n];

        for (int i = 0; i < n; i++) {
            height[i] = scanner.nextInt();
        }

        Solution solution = new Solution();
        int trappedWater = solution.trap(height);

        System.out.println(trappedWater);
    }
}

2. https://leetcode.com/problems/maximum-subarray/
code-
import java.util.Scanner;

public class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int[] leftMax = new int[n];
        int[] rightMax = new int[n];

        leftMax[0] = height[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(leftMax[i - 1], height[i]);
        }

        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = Math.max(rightMax[i + 1], height[i]);
        }

        int trappedWater = 0;
        for (int i = 0; i < n; i++) {
            int minHeight = Math.min(leftMax[i], rightMax[i]);
            trappedWater += minHeight - height[i];
        }

        return trappedWater;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();

        int[] height = new int[n];

        for (int i = 0; i < n; i++) {
            height[i] = scanner.nextInt();
        }

        Solution solution = new Solution();
        int trappedWater = solution.trap(height);

        System.out.println(trappedWater);
    }
}

3. https://www.interviewbit.com/problems/max-non-negative-subarray/
code-
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Solution {
    public List<Integer> maxset(int[] A) {
        long maxSum = 0;
        long currentSum = 0;
        int startIndex = 0;
        int maxStartIndex = 0;
        int maxLength = 0;

        for (int i = 0; i < A.length; i++) {
            if (A[i] >= 0) {
                currentSum += A[i];
                if (currentSum > maxSum || (currentSum == maxSum && (i - startIndex + 1) > maxLength)) {
                    maxSum = currentSum;
                    maxStartIndex = startIndex;
                    maxLength = i - startIndex + 1;
                }
            } else {
                currentSum = 0;
                startIndex = i + 1;
            }
        }

        List<Integer> result = new ArrayList<>();
        for (int i = maxStartIndex; i < maxStartIndex + maxLength; i++) {
            result.add(A[i]);
        }
        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int N = scanner.nextInt();

        int[] A = new int[N];

        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }

        Solution solution = new Solution();
        List<Integer> result = solution.maxset(A);

        System.out.println(result);
    }
}


4. https://leetcode.com/problems/rotate-array/
code-
import java.util.Scanner;

public class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k = k % n;

        reverse(nums, 0, n - 1);
        reverse(nums, 0, k - 1);
        reverse(nums, k, n - 1);
    }

    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int N = scanner.nextInt();

        int[] nums = new int[N];

        for (int i = 0; i < N; i++) {
            nums[i] = scanner.nextInt();
        }

        int k = scanner.nextInt();

        Solution solution = new Solution();
        solution.rotate(nums, k);

        for (int num : nums) {
            System.out.print(num + " ");
        }
    }
}
