1. https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/
code-
class Solution {
    public ListNode deleteMiddle(ListNode head) {
          int sz = 0;
        ListNode temp = head;
        while ( temp != null){
            temp = temp.next;
            sz++;
        }
        if (sz == 2){
            head.next = null;
            return head;
        }
         if (sz == 1){
            head = null;
            return head;
        }
        int middle = sz/2;
        int i = 1;
        ListNode prev = head;
        while ( i < middle){
            prev = prev.next;
            i++;
        }
        prev.next = prev.next.next;
        return head;
    }
}

2. https://leetcode.com/problems/reverse-nodes-in-k-group/
code-

class Solution {
    public int size(ListNode head){
        if(head==null){
            return 0;
        }
        if(head.next == null){
            return 1;
        }
         int p =0;
        ListNode current = head;
        while(current != null){
            current = current.next;
            p++;
        }
    return p; }
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null){
            return null;
        }
        if(head.next ==null){
            return head;
        }
        
        ListNode pre = null;
        ListNode curr = head;
        ListNode Next= null;
        int count = 0;
        while( curr!= null && count<k){
           Next = curr.next;
           curr.next = pre;
           pre=  curr;
           curr = Next;
           count++;
        }
        if(Next!=null && size(Next)>=k){
            head.next = reverseKGroup(Next,k);
        }
        else{
            head.next = Next;
        }
   return pre; }
}

3. https://leetcode.com/problems/reverse-linked-list-ii/
code-
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if (left == right) return head;
        List<Integer> list = new LinkedList<>();
        goRecursively(head, list, left, right, 0);
        return head;
    }

    private void goRecursively(ListNode node, List<Integer> list, int left, int right, int cur) {
        if (node == null) return;
        cur++;
        if (cur >= left && cur <= right) {
            list.add(node.val);
        }
        if (cur > right) {
            return;
        }

        goRecursively(node.next, list, left, right, cur);
        if (cur >= left && cur <= right) {
            node.val = list.get(0);
            list.remove(0);
        }
    }
}

4. https://leetcode.com/problems/reverse-linked-list/
code-

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode cur = head;
        ListNode temp = null;

        while(cur != null)
        {   
            temp = cur.next;
            cur.next = prev;
            prev = cur;
            cur = temp;
        }
            head = prev;
        
            return head;
        
    }
}

5. https://leetcode.com/problems/design-linked-list/
code-
class ListNode {
    int val;
    ListNode next;
    ListNode() {
    }

    ListNode(int val) {
        this.val = val;
    }

    ListNode(int val, ListNode next) {
        this.val = val;
        this.next = next;
    }
}

class MyLinkedList {
    ListNode head;
    int size;

    public MyLinkedList() {
        head = new ListNode(0);
        size = 0;
    }
    public int get(int index) {
        if(index < 0 || index >= size) return -1;
        ListNode cur = head;
        while(index >= 0){
            cur = cur.next;
            index--;
        }
        return cur.val;
    }
    
    public void addAtHead(int val) {
        addAtIndex(0, val);
        
    }
    
    public void addAtTail(int val) {
        addAtIndex(size, val);
    }
    
    public void addAtIndex(int index, int val) {
        if(index > size) return;
        // if(index < 0) index = 0;      
        ListNode cur = head;
        ListNode node = new ListNode(val);
        for(int i = 0; i < index; i++){
            cur = cur.next;
        }
        node.next = cur.next; 
        cur.next = node;
        size++;
    }
    
    public void deleteAtIndex(int index) {
        if(index<0 || index>=size) return;
        ListNode cur = head;
        while(index > 0){
            cur = cur.next;
            index--;
        }
        cur.next = cur.next.next;
        size--;

    
    }
}

6. https://leetcode.com/problems/remove-nth-node-from-end-of-list/
code-
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
       ListNode start = new ListNode();
        start.next = head;
        ListNode fast = start;
        ListNode slow = start;     

        for(int i = 1; i <= n; ++i)
            fast = fast.next;
    
        while(fast.next != null)
        {
            fast = fast.next;
            slow = slow.next;
        }
        
        slow.next = slow.next.next;
        
        return start.next;
    }
}

7. https://leetcode.com/problems/remove-duplicates-from-sorted-list/
code-
class Solution {
    public ListNode deleteDuplicates(ListNode head) {

    ListNode temp = head;
        if (head == null)
        {
            return head;
        }
        
        while (temp.next !=null)
        {
            if (temp.val != temp.next.val) {
                temp = temp.next;
            }
            else temp.next = temp.next.next;
        }
        return head;
    }
}
